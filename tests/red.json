RED {
    nodes: {
      createNode: [Function: createNode],
      getNode: [Function: getNode],
      eachNode: [Function: eachNode],
      addCredentials: [AsyncFunction: add],
      getCredentials: [Function: get],
      deleteCredentials: [Function: delete],
      registerType: [Function (anonymous)],
      registerSubflow: [Function (anonymous)]
    },
    log: {
      FATAL: 10,
      ERROR: 20,
      WARN: 30,
      INFO: 40,
      DEBUG: 50,
      TRACE: 60,
      AUDIT: 98,
      METRIC: 99,
      addHandler: [Function: addHandler],
      removeHandler: [Function: removeHandler],
      log: [Function: log],
      info: [Function: info],
      warn: [Function: warn],
      error: [Function: error],
      trace: [Function: trace],
      debug: [Function: debug],
      metric: [Function: metric],
      audit: [Function: audit],
      _: [Function (anonymous)]
    },
    settings: {
      get: [Function: get],
      set: [Function: set],
      delete: [Function: delete],
      available: [Function: available],
      registerNodeSettings: [Function: registerNodeSettings],
      exportNodeSettings: [Function: exportNodeSettings],
      enableNodeSettings: [Function: enableNodeSettings],
      disableNodeSettings: [Function: disableNodeSettings],
      getUserSettings: [Function: getUserSettings],
      setUserSettings: [Function: setUserSettings],
      flowFile: [Getter/Setter],
      flowFilePretty: [Getter/Setter],
      uiPort: [Getter/Setter],
      diagnostics: [Getter/Setter],
      runtimeState: [Getter/Setter],
      logging: [Getter/Setter],
      exportGlobalContextKeys: [Getter/Setter],
      externalModules: [Getter/Setter],
      editorTheme: [Getter/Setter],
      functionExternalModules: [Getter/Setter],
      functionGlobalContext: [Getter/Setter],
      debugMaxLength: [Getter/Setter],
      mqttReconnectTime: [Getter/Setter],
      serialReconnectTime: [Getter/Setter],
      settingsFile: [Getter/Setter],
      disableEditor: [Getter/Setter],
      httpAdminRoot: [Getter/Setter],
      httpAdminAuth: [Getter/Setter],
      httpNodeRoot: [Getter/Setter],
      httpNodeAuth: [Getter/Setter],
      uiHost: [Getter/Setter],
      userDir: [Getter/Setter],
      coreNodesDir: [Getter/Setter],
      version: [Getter/Setter]
    },
    events: EventEmitter {
      _events: [Object: null prototype] {
        'type-registered': [Function (anonymous)],
        'node-status': [Function: handleStatusEvent],
        'runtime-event': [Function: handleRuntimeEvent],
        comms: [Function: handleCommsEvent],
        'event-log': [Function: handleEventLog],
        'registry:plugin-added': [Function: onPluginAdded]
      },
      _eventsCount: 6,
      _maxListeners: undefined,
      _on: [Function: addListener],
      on: [Function (anonymous)],
      _once: [Function: once],
      once: [Function (anonymous)],
      addListener: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    hooks: {
      has: [Function: has],
      clear: [Function: clear],
      add: [Function: add],
      remove: [Function: remove],
      trigger: [Function: trigger]
    },
    util: {
      encodeObject: [Function: encodeObject],
      ensureString: [Function: ensureString],
      ensureBuffer: [Function: ensureBuffer],
      cloneMessage: [Function: cloneMessage],
      compareObjects: [Function: compareObjects],
      generateId: [Function: generateId],
      getMessageProperty: [Function: getMessageProperty],
      setMessageProperty: [Function: setMessageProperty],
      getObjectProperty: [Function: getObjectProperty],
      setObjectProperty: [Function: setObjectProperty],
      evaluateNodeProperty: [Function: evaluateNodeProperty],
      normalisePropertyExpression: [Function: normalisePropertyExpression],
      normaliseNodeTypeName: [Function: normaliseNodeTypeName],
      prepareJSONataExpression: [Function: prepareJSONataExpression],
      evaluateJSONataExpression: [Function: evaluateJSONataExpression],
      parseContextStore: [Function: parseContextStore],
      getSetting: [Function: getSetting]
    },
    version: [Function: getVersion],
    require: [Function: requireModule],
    import: [Function: importModule],
    comms: { publish: [Function: publish] },
    plugins: {
      registerPlugin: [Function: registerPlugin],
      get: [Function: get],
      getByType: [Function: getByType]
    },
    library: { register: [Function: register] },
    httpNode: <ref *1> [Function: app] {
      _events: [Object: null prototype] { mount: [Function: onmount] },
      _eventsCount: 1,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      init: [Function: init],
      defaultConfiguration: [Function: defaultConfiguration],
      lazyrouter: [Function: lazyrouter],
      handle: [Function: handle],
      use: [Function: use],
      route: [Function: route],
      engine: [Function: engine],
      param: [Function: param],
      set: [Function: set],
      path: [Function: path],
      enabled: [Function: enabled],
      disabled: [Function: disabled],
      enable: [Function: enable],
      disable: [Function: disable],
      acl: [Function (anonymous)],
      bind: [Function (anonymous)],
      checkout: [Function (anonymous)],
      connect: [Function (anonymous)],
      copy: [Function (anonymous)],
      delete: [Function (anonymous)],
      get: [Function (anonymous)],
      head: [Function (anonymous)],
      link: [Function (anonymous)],
      lock: [Function (anonymous)],
      'm-search': [Function (anonymous)],
      merge: [Function (anonymous)],
      mkactivity: [Function (anonymous)],
      mkcalendar: [Function (anonymous)],
      mkcol: [Function (anonymous)],
      move: [Function (anonymous)],
      notify: [Function (anonymous)],
      options: [Function (anonymous)],
      patch: [Function (anonymous)],
      post: [Function (anonymous)],
      propfind: [Function (anonymous)],
      proppatch: [Function (anonymous)],
      purge: [Function (anonymous)],
      put: [Function (anonymous)],
      rebind: [Function (anonymous)],
      report: [Function (anonymous)],
      search: [Function (anonymous)],
      source: [Function (anonymous)],
      subscribe: [Function (anonymous)],
      trace: [Function (anonymous)],
      unbind: [Function (anonymous)],
      unlink: [Function (anonymous)],
      unlock: [Function (anonymous)],
      unsubscribe: [Function (anonymous)],
      all: [Function: all],
      del: [Function (anonymous)],
      render: [Function: render],
      listen: [Function: listen],
      request: IncomingMessage { app: [Circular *1] },
      response: ServerResponse { app: [Circular *1] },
      cache: {},
      engines: {},
      settings: {
        'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: generateETag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        view: [Function: View],
        views: '/home/zhangmx/repos/lab/nodered/node-red-contrib-beaver/views',
        'jsonp callback name': 'callback'
      },
      locals: [Object: null prototype] { settings: [Object] },
      mountpath: '/',
      parent: [Function: app] {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function: lazyrouter],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function (anonymous)],
        bind: [Function (anonymous)],
        checkout: [Function (anonymous)],
        connect: [Function (anonymous)],
        copy: [Function (anonymous)],
        delete: [Function (anonymous)],
        get: [Function (anonymous)],
        head: [Function (anonymous)],
        link: [Function (anonymous)],
        lock: [Function (anonymous)],
        'm-search': [Function (anonymous)],
        merge: [Function (anonymous)],
        mkactivity: [Function (anonymous)],
        mkcalendar: [Function (anonymous)],
        mkcol: [Function (anonymous)],
        move: [Function (anonymous)],
        notify: [Function (anonymous)],
        options: [Function (anonymous)],
        patch: [Function (anonymous)],
        post: [Function (anonymous)],
        propfind: [Function (anonymous)],
        proppatch: [Function (anonymous)],
        purge: [Function (anonymous)],
        put: [Function (anonymous)],
        rebind: [Function (anonymous)],
        report: [Function (anonymous)],
        search: [Function (anonymous)],
        source: [Function (anonymous)],
        subscribe: [Function (anonymous)],
        trace: [Function (anonymous)],
        unbind: [Function (anonymous)],
        unlink: [Function (anonymous)],
        unlock: [Function (anonymous)],
        unsubscribe: [Function (anonymous)],
        all: [Function: all],
        del: [Function (anonymous)],
        render: [Function: render],
        listen: [Function: listen],
        request: [IncomingMessage],
        response: [ServerResponse],
        cache: {},
        engines: {},
        settings: [Object],
        locals: [Object: null prototype],
        mountpath: '/',
        _router: [Function]
      }
    },
    httpAdmin: <ref *2> [Function: app] {
      _events: [Object: null prototype] { mount: [Function: onmount] },
      _eventsCount: 1,
      _maxListeners: undefined,
      setMaxListeners: [Function: setMaxListeners],
      getMaxListeners: [Function: getMaxListeners],
      emit: [Function: emit],
      addListener: [Function: addListener],
      on: [Function: addListener],
      prependListener: [Function: prependListener],
      once: [Function: once],
      prependOnceListener: [Function: prependOnceListener],
      removeListener: [Function: removeListener],
      off: [Function: removeListener],
      removeAllListeners: [Function: removeAllListeners],
      listeners: [Function: listeners],
      rawListeners: [Function: rawListeners],
      listenerCount: [Function: listenerCount],
      eventNames: [Function: eventNames],
      init: [Function: init],
      defaultConfiguration: [Function: defaultConfiguration],
      lazyrouter: [Function: lazyrouter],
      handle: [Function: handle],
      use: [Function: use],
      route: [Function: route],
      engine: [Function: engine],
      param: [Function: param],
      set: [Function: set],
      path: [Function: path],
      enabled: [Function: enabled],
      disabled: [Function: disabled],
      enable: [Function: enable],
      disable: [Function: disable],
      acl: [Function (anonymous)],
      bind: [Function (anonymous)],
      checkout: [Function (anonymous)],
      connect: [Function (anonymous)],
      copy: [Function (anonymous)],
      delete: [Function (anonymous)],
      get: [Function (anonymous)],
      head: [Function (anonymous)],
      link: [Function (anonymous)],
      lock: [Function (anonymous)],
      'm-search': [Function (anonymous)],
      merge: [Function (anonymous)],
      mkactivity: [Function (anonymous)],
      mkcalendar: [Function (anonymous)],
      mkcol: [Function (anonymous)],
      move: [Function (anonymous)],
      notify: [Function (anonymous)],
      options: [Function (anonymous)],
      patch: [Function (anonymous)],
      post: [Function (anonymous)],
      propfind: [Function (anonymous)],
      proppatch: [Function (anonymous)],
      purge: [Function (anonymous)],
      put: [Function (anonymous)],
      rebind: [Function (anonymous)],
      report: [Function (anonymous)],
      search: [Function (anonymous)],
      source: [Function (anonymous)],
      subscribe: [Function (anonymous)],
      trace: [Function (anonymous)],
      unbind: [Function (anonymous)],
      unlink: [Function (anonymous)],
      unlock: [Function (anonymous)],
      unsubscribe: [Function (anonymous)],
      all: [Function: all],
      del: [Function (anonymous)],
      render: [Function: render],
      listen: [Function: listen],
      request: IncomingMessage { app: [Circular *2] },
      response: ServerResponse { app: [Circular *2] },
      cache: {},
      engines: {},
      settings: {
        'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: generateETag],
        env: 'development',
        'query parser': 'extended',
        'query parser fn': [Function: parseExtendedQueryString],
        'subdomain offset': 2,
        view: [Function: View],
        views: '/home/zhangmx/repos/lab/nodered/node-red-contrib-beaver/views',
        'jsonp callback name': 'callback'
      },
      locals: [Object: null prototype] { settings: [Object] },
      mountpath: '/',
      parent: [Function: app] {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        off: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        rawListeners: [Function: rawListeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function: lazyrouter],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function (anonymous)],
        bind: [Function (anonymous)],
        checkout: [Function (anonymous)],
        connect: [Function (anonymous)],
        copy: [Function (anonymous)],
        delete: [Function (anonymous)],
        get: [Function (anonymous)],
        head: [Function (anonymous)],
        link: [Function (anonymous)],
        lock: [Function (anonymous)],
        'm-search': [Function (anonymous)],
        merge: [Function (anonymous)],
        mkactivity: [Function (anonymous)],
        mkcalendar: [Function (anonymous)],
        mkcol: [Function (anonymous)],
        move: [Function (anonymous)],
        notify: [Function (anonymous)],
        options: [Function (anonymous)],
        patch: [Function (anonymous)],
        post: [Function (anonymous)],
        propfind: [Function (anonymous)],
        proppatch: [Function (anonymous)],
        purge: [Function (anonymous)],
        put: [Function (anonymous)],
        rebind: [Function (anonymous)],
        report: [Function (anonymous)],
        search: [Function (anonymous)],
        source: [Function (anonymous)],
        subscribe: [Function (anonymous)],
        trace: [Function (anonymous)],
        unbind: [Function (anonymous)],
        unlink: [Function (anonymous)],
        unlock: [Function (anonymous)],
        unsubscribe: [Function (anonymous)],
        all: [Function: all],
        del: [Function (anonymous)],
        render: [Function: render],
        listen: [Function: listen],
        request: [IncomingMessage],
        response: [ServerResponse],
        cache: {},
        engines: {},
        settings: [Object],
        locals: [Object: null prototype],
        mountpath: '/',
        _router: [Function],
        parent: [Function]
      }
    },
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype] {
        request: [Function (anonymous)],
        connection: [Function: connectionListener],
        upgrade: [Function (anonymous)]
      },
      _eventsCount: 3,
      _maxListeners: 0,
      _connections: 0,
      _handle: null,
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: false,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      headersTimeout: 60000,
      requestTimeout: 0,
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kUniqueHeaders)]: null
    },
    auth: { needsPermission: [Function: needsPermission] },
    _: [Function (anonymous)]
  }